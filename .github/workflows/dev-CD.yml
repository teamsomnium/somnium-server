#name: Deploy to Amazon DEVELOP-ECS
#
#on:
#  push:
#    branches:
#      - develop
#
#jobs:
#  dev-CD:
#    name: Deploy
#    runs-on: ubuntu-latest
#    environment: develop
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Configure AWS credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      - name: Login to Amazon ECR
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v1
#
#      - name: Inject slug/short variables
#        id: slug-short-variables-inject
#        uses: rlespinasse/github-slug-action@v3.x
#
#      - name: set env for image tags
#        id: set-env
#        run: |
#          echo "::set-output name=image-name::${GITHUB_REF_SLUG}"
#          echo "::set-output name=image-version::${GITHUB_SHA_SHORT}"
#          echo "::set-output name=image-tag::${GITHUB_REF_SLUG}-${GITHUB_SHA_SHORT}"
#          echo "::set-output name=full-image-path::${{ steps.login-ecr.outputs.registry }}/somnium:${GITHUB_REF_SLUG}-${GITHUB_SHA_SHORT}"
#
#      - name: Build, tag, and push image to Amazon ECR
#        id: build-image
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: ${{ steps.set-env.outputs.full-image-path }}
#          cache-from: type=gha
#          cache-to: type=gha, mode=max
#
#      - name: Fill in the new image ID in the Amazon ECS task definition
#        id: task-def
#        uses: aws-actions/amazon-ecs-render-task-definition@v1
#        with:
#          task-definition: task-definition.json
#          container-name: ${{ env.CONTAINER_NAME }}
#          image: ${{ steps.build-image.outputs.image }}
#
#      - name: Deploy Amazon ECS task definition
#        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
#        with:
#          task-definition: ${{ steps.task-def.outputs.task-definition }}
#          service: ${{ env.ECS_SERVICE }}
#          cluster: ${{ env.ECS_CLUSTER }}
#          wait-for-service-stability: true